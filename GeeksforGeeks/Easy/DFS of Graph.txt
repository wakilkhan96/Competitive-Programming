#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
  public:
     void dfs(int s, int p, vector<int>adj[], vector<int> &visited, vector<int> &traversal) {
         if(visited[s]==1) return;
         traversal.push_back(s);
         visited[s] = 1;
         
         for(auto v: adj[s]) {
             if(visited[v]==1) continue;
             dfs(v, s, adj, visited, traversal);
         }
         return;
     }
    // Function to return a list containing the DFS traversal of the graph.
    vector<int> dfsOfGraph(int V, vector<int> adj[]) {
        // Code here
        vector<int> traversal, visited(V, 0);
        dfs(0, -1, adj, visited, traversal);
        return traversal;
    }
};

// { Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;

        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        // string s1;
        // cin>>s1;
        Solution obj;
        vector<int> ans = obj.dfsOfGraph(V, adj);
        for (int i = 0; i < ans.size(); i++) {
            cout << ans[i] << " ";
        }
        cout << endl;
    }
    return 0;
}  // } Driver Code Ends