
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
// Back-end complete function Template for C++

class Solution{
public:
    void bfs(int s, vector< vector<int> > &tc, vector<int> adj[]) {
        queue<int> q;
        tc[s][s] = 1;
        q.push(s);
        
        while(!q.empty()) {
            int u = q.front();
            q.pop();
            for(auto v: adj[u]) {
                if(tc[s][v]==0) {
                    tc[s][v]=1;
                    q.push(v);
                }
            }
        }
    }
    vector<vector<int>> transitiveClosure(int N, vector<vector<int>> graph)
    {
        // code here
        vector<int> adj[N];
        for(int i=0; i<N; i++) {
            for(int j=0; j<N; j++) {
                if(graph[i][j]==1) adj[i].push_back(j);
            }
        }
        
        vector< vector<int> > tc(N, vector<int>(N, 0) );
        for(int i=0; i<N; i++) {
            tc[i][i] = 1;
            bfs(i, tc, adj);
        }
        
        return tc;
    }
};

// { Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int N;
        cin>>N;
        vector<vector<int>> graph(N, vector<int>(N, -1));
        for(int i = 0;i < N;i++)
            for(int j=0;j<N;j++)
            cin>>graph[i][j];
        
        Solution ob;
        vector<vector<int>> ans = ob.transitiveClosure(N, graph);
        for(int i = 0;i < N;i++)
            {for(int j = 0;j < N;j++)
                cout<<ans[i][j]<<" ";
        cout<<"\n";}
    }
    return 0;
}  // } Driver Code Ends