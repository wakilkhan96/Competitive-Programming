

#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends


class Solution {
public:
    bool valid(int x, int y, int n, vector< vector<int> > &visited) {
        if(x<0 || x>=n || y<0 || y>=n) return false;
        if(visited[x][y]==1) return false;
        return true;
    }
    int bfs(pair<int, int> s, pair<int, int> d, int n, vector<vector<int>>& visited) {
        int x = s.first, y = s.second;
        
        vector< vector<int> > dist(n, vector<int> (n, 0));
        
        queue<pair<int, int> > q;
        q.push({x, y});
        visited[x][y] = 1;
        
        int dx[] = {-2, -2, -1, -1, +1, +1, +2, +2};
        int dy[] = {-1, +1, -2, +2, -2, +2, -1, +1};
        //cout<<"->"<<q.size()<<endl;
        //cout<<x<<" "<<y<<endl;
        while(!q.empty()) {
            pair <int, int> p;
            p = q.front();
            x = p.first, y = p.second;
            q.pop();
            
            for(int i=0; i<8; i++) {
                int _x = dx[i] + x;
                int _y = dy[i] + y;
                
                if(valid(_x, _y, n, visited)) {
                    //cout<<_x<<" "<<_y<<endl;

                    visited[_x][_y] = 1;
                    dist[_x][_y] = dist[x][y] + 1;
                    q.push({_x, _y});
                    if(_x==d.first && _y == d.second) return dist[_x][_y];
                }
            }
        }
        
        return dist[d.first][d.second];
    }
	int minStepToReachTarget(vector<int>&KnightPos, vector<int>&TargetPos, int N){
	    // Code here
	    vector< vector<int> > visited(N, vector<int> (N, 0));
	    pair<int, int> s, d;
	    s.first = KnightPos[0], s.second = KnightPos[1];
	    d.first = TargetPos[0], d.second = TargetPos[1];
	    s.first--, s.second--;
	    d.first--, d.second--;
	    return bfs(s, d, N, visited);
	}
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		vector<int>KnightPos(2);
		vector<int>TargetPos(2);
		int N;
		cin >> N;
		cin >> KnightPos[0] >> KnightPos[1];
		cin >> TargetPos[0] >> TargetPos[1];
		Solution obj;
		int ans = obj.minStepToReachTarget(KnightPos, TargetPos, N);
		cout << ans <<"\n";
	}
	return 0;
}  // } Driver Code Ends