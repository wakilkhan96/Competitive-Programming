#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
  public:
    // Function to detect cycle in a directed graph.
    bool topSort(int n, vector<int> adj[]) {
        vector<int> indegree(n, 0);
        for(int i=0; i<n; i++) {
            for(auto j: adj[i]) indegree[j]++;
        }
        
        queue<int> q;
        for(int i=0; i<n; i++) {
            if(indegree[i]==0) q.push(i);
        }
        
        int visited = 0;
        while(!q.empty()) {
            visited++;
            int front = q.front();
            q.pop();
            for(auto i: adj[front]) {
                indegree[i]--;
                if(indegree[i]==0) q.push(i);
            }
        }
        if(visited<n) return true;
        return false;
    }
    bool isCyclic(int n, vector<int> adj[]) {
        // code here
        return topSort(n, adj);
    }
};

// { Driver Code Starts.

int main() {

    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;

        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
        }

        Solution obj;
        cout << obj.isCyclic(V, adj) << "\n";
    }

    return 0;
}
  // } Driver Code Ends