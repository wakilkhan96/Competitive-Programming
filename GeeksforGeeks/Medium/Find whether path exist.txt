#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends


class Solution
{
    public:
    bool valid(int x, int y, int n, vector< vector<int> > &visited) {
        if(x<0 || x>=n || y<0 || y>=n) return false;
        if(visited[x][y]==1) return false;
        return true;
    }
    bool bfs(int s, int d, vector<vector<int>>& grid) {
        int n = grid.size();
        int x, y;
        
        for(int i=0; i<n; i++) {
            for(int j=0; j<n; j++) {
                if(grid[i][j]==1) {
                    x = i, y = j;
                    break;
                }
            }
        }
        
        vector< vector<int> > visited(n, vector<int> (n, 0));
        
        queue<pair<int, int> > q;
        q.push({x, y});
        visited[x][y] = 1;
        int dx[] = {-1, 0, +1, 0};
        int dy[] = {0, +1, 0, -1};
        //cout<<"->"<<q.size()<<endl;
        //cout<<x<<" "<<y<<endl;
        while(!q.empty()) {
            pair <int, int> p;
            p = q.front();
            x = p.first, y = p.second;
            q.pop();
            
            for(int i=0; i<4; i++) {
                int _x = dx[i] + x;
                int _y = dy[i] + y;
                
                if(valid(_x, _y, n, visited)) {
                    //cout<<_x<<" "<<_y<<endl;
                    if(grid[_x][_y] == 2) return true;
                    if(grid[_x][_y] != 0) {
                        visited[_x][_y] = 1;
                        q.push({_x, _y});
                    }
                }
            }
        }
        
        return false;
    }
    //Function to find whether a path exists from the source to destination.
    bool is_Possible(vector<vector<int> >& grid) 
    {
        //code here
        return bfs(1, 2, grid);
    }
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n;
		cin >> n;
		vector<vector<int>>grid(n, vector<int>(n, -1));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < n; j++){
				cin >> grid[i][j];
			}
		}
		Solution obj;
		bool ans = obj.is_Possible(grid);
		cout << ((ans) ? "1\n" : "0\n");
	}
	return 0;
}  // } Driver Code Ends