class Solution {
public:
    bool containsNearbyDuplicate(vector<int>& nums, int k) {
        unordered_map<int, int> mp;
		
		// checking if a number is present more than 1 times within window size equal to k
        for(int i=0; i<=k && i<nums.size(); i++) {
            mp[nums[i]]++;
            if(mp[nums[i]]>1) return true;
        }
		// we will slide the window by removing element at m-th index and adding element at n-th element
        for(int m=0, n=k+1; n<nums.size(); m++, n++) {
            mp[nums[m]]--;
            mp[nums[n]]++;
            if(mp[nums[n]]>1) return true;
        }
        
        return false;
    }
};



/* 
            Technique 
So, basically problem is about finding a repeated number within a window of size i-j <=k, so maximum size of window is k
we will slide the window by removing element at m-th index and adding element at n-th element, untill we find our answer

*/




/* 112ms solution*/
class Solution {
public:
  Solution() { ios::sync_with_stdio(0); }
  bool containsNearbyDuplicate(vector<int>& nums, int k) {
    unordered_map<int, int> last_seen;
    for (int i = 0; i < nums.size(); ++i) {
      if (last_seen.count(nums[i]) && (i - last_seen[nums[i]]) <= k)
        return true;
      last_seen[nums[i]] = i;
    }
    return false;
  }
};