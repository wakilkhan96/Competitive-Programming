/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* head = new ListNode();
        ListNode* back = head;
        
        int sum = 0;
        while(l1 && l2) {
            sum += (l1->val + l2->val);
            back->next = new ListNode(sum%10);
            back = back->next;
            sum /= 10;
            
            l1 = l1->next;
            l2 = l2->next;
        }
        
        while(l1) {
            sum += l1->val;
            back->next = new ListNode(sum%10);
            back = back->next;
            sum /= 10;
            
            l1 = l1->next;
        }
        while(l2) {
            sum += l2->val;
            back->next = new ListNode(sum%10);
            back = back->next;
            sum /= 10;
            
            l2 = l2->next;
        }
        
        if(sum>0) back->next = new ListNode(sum);
        
        return head->next;
    }
};

Success
Details 
Runtime: 24 ms, faster than 91.90% of C++ online submissions for Add Two Numbers.
Memory Usage: 71.6 MB, less than 11.10% of C++ online submissions for Add Two Numbers.