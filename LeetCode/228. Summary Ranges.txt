class Solution {
public:
    string make_range(int a, int b) {
        string str = "";
        if(a==b) str += to_string(a);
        
        else {
            str += to_string(a);
            str += "->";
            str += to_string(b);
        }
            
        return str;
    }
    vector<string> summaryRanges(vector<int>& nums) {
        if(nums.size()==0) return {}; 
        vector<string> ranges;
        int l = 0, r = 0;
        for(int i=0; i<nums.size(); i++) {
            if(l==i) continue;
            else {
                if(nums[i]==nums[i-1]+1) continue;
                else {
                    r = i-1;
                    ranges.push_back(make_range(nums[l], nums[r]));
                    l = i;
                    r = l;
                }
            }
        }
        
        ranges.push_back(make_range(nums[l], nums[nums.size()-1]));
        
        return ranges;
    }
};


Success
Details 
Runtime: 0 ms, faster than 100.00% of C++ online submissions for Summary Ranges.
Memory Usage: 6.9 MB, less than 13.87% of C++ online submissions for Summary Ranges.