/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int treeTrversal(TreeNode* root, int depth) {
        if(root==nullptr) return INT_MAX;
        depth = depth + 1;
        if(root->left==nullptr && root->right==nullptr) return depth;
        return min(treeTrversal(root->left, depth), treeTrversal(root->right, depth));
    }
    int minDepth(TreeNode* root) {
        ios:: sync_with_stdio(0);
        if(root==nullptr) return 0;
        return treeTrversal(root, 0);
    }
};


Runtime: 188 ms, faster than 99.69% of C++ online submissions for Minimum Depth of Binary Tree.
Memory Usage: 144.4 MB, less than 98.99% of C++ online submissions for Minimum Depth of Binary Tree.