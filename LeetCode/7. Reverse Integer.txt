class Solution {
public:
    int reverse(int x) {
        bool negative = false;
        if(x<0) negative = true;
        long long n = 0LL, temp = abs(x);
        
        while(temp) {
            n = n*10LL + (temp%10LL);
            temp /= 10LL;
        }
        
        if(negative) {
            n = -n;
            if(n<-INT_MAX) return 0;
            return (int)n;
        }
        else {
            if(n>INT_MAX) return 0;
            return (int)n;
        }
    }
};


Success
Details 
Runtime: 0 ms, faster than 100.00% of C++ online submissions for Reverse Integer.
Memory Usage: 5.7 MB, less than 95.97% of C++ online submissions for Reverse Integer.





Solution
Approach 1: Pop and Push Digits & Check before Overflow
Intuition

We can build up the reverse integer one digit at a time. While doing so, we can check beforehand whether or not appending another digit would cause overflow.

Algorithm

Reversing an integer can be done similarly to reversing a string.

We want to repeatedly "pop" the last digit off of xx and "push" it to the back of the \text{rev}rev. In the end, \text{rev}rev will be the reverse of the xx.

To "pop" and "push" digits without the help of some auxiliary stack/array, we can use math.

//pop operation:
pop = x % 10;
x /= 10;

//push operation:
temp = rev * 10 + pop;
rev = temp;
However, this approach is dangerous, because the statement \text{temp} = \text{rev} \cdot 10 + \text{pop}temp=rev⋅10+pop can cause overflow.

Luckily, it is easy to check beforehand whether or this statement would cause an overflow.

To explain, lets assume that \text{rev}rev is positive.

If temp = \text{rev} \cdot 10 + \text{pop}temp=rev⋅10+pop causes overflow, then it must be that \text{rev} \geq \frac{INTMAX}{10}rev≥ 
10
INTMAX
​
 
If \text{rev} > \frac{INTMAX}{10}rev> 
10
INTMAX
​
 , then temp = \text{rev} \cdot 10 + \text{pop}temp=rev⋅10+pop is guaranteed to overflow.
If \text{rev} == \frac{INTMAX}{10}rev== 
10
INTMAX
​
 , then temp = \text{rev} \cdot 10 + \text{pop}temp=rev⋅10+pop will overflow if and only if \text{pop} > 7pop>7
Similar logic can be applied when \text{rev}rev is negative.


Complexity Analysis

Time Complexity: O(\log(x))O(log(x)). There are roughly \log_{10}(x)log 
10
​
 (x) digits in xx.
Space Complexity: O(1)O(1).