class Solution {
public:
    string intToRoman(int num) {
        
        string str = "";
        
        while(num) {
            if(num>=1000) str.push_back('M'), num -= 1000;
            else if(num>=900) str.push_back('C'), str.push_back('M'), num -= 900;
            else if(num>=500) str.push_back('D'), num -= 500;
            else if(num>=400) str.push_back('C'), str.push_back('D'), num -= 400;
            else if(num>=100) str.push_back('C'), num -= 100;
            else if(num>=90) str.push_back('X'), str.push_back('C'), num -= 90;
            else if(num>=50) str.push_back('L'), num -= 50;
            else if(num>=40) str.push_back('X'), str.push_back('L'), num -= 40;
            else if(num>=10) str.push_back('X'), num -= 10;
            else if(num>=9) str.push_back('I'), str.push_back('X'), num -= 9;
            else if(num>=5) str.push_back('V'), num -= 5;
            else if(num>=4) str.push_back('I'), str.push_back('V'), num -= 4;
            else str.push_back('I'), num -= 1;
            
        }
        
        return str;
    }
};



or,




class Solution {
public:
    const int val[13] = {1000,900,500,400,100,90,50,40,10,9,5,4,1};
    const string rom[13] = {"M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I"};

    string intToRoman(int N) {
        
       string ans = "";
       for(int i=0; N > 0; i++)
       {
           while(N >= val[i])
           {
               ans += rom[i];
               N -= val[i];
           }
       }
        return ans;
    }
};



Success
Details 
Runtime: 0 ms, faster than 100.00% of C++ online submissions for Integer to Roman.
Memory Usage: 6 MB, less than 52.19% of C++ online submissions for Integer to Roman.