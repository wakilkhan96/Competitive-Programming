// faster
class Solution {
public:
    string simplifyPath(string path) {
        string res, tmp;
        vector<string> stk;
        stringstream ss(path);
        while(getline(ss,tmp,'/')) {
            if (tmp == "" or tmp == ".") continue;
            if (tmp == ".." and !stk.empty()) stk.pop_back();
            else if (tmp != "..") stk.push_back(tmp);
        }
        for(auto str : stk) res += "/"+str;
        return res.empty() ? "/" : res;
        
    }
};




// a bit slower
class Solution {
public:
    string simplifyPath(string path) {
        
        path.push_back('/');   // to handle cases like "/..."
        
        stack<string> st;   // to hold directories
        
        string directory = "";
        for(int i=0; i<path.size(); i++) {
            
            if( path[i] == '/' ) {      // push valid directories to stack
                if( directory == ".." && !st.empty() ) st.pop();
                else if( directory != "" && directory != "." && directory != "..") st.push(directory);
                directory = "";
            }
            else directory.push_back(path[i]);  // adding chars to directory name until finds any '/' slash
        }
        
        
        // now construct the canonical directory
        string result = "";
        while(!st.empty()) {
            result = "/"+st.top()+result;
            st.pop();
        }
        
        if(result=="") return "/";
        return result;
    }
};