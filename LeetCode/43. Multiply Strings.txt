class Solution {
public:
    string multiply(string num1, string num2) {
        if(num1=="0" || num2=="0") return "0";
        int len1 = num1.length(), len2 = num2.length();
        string ans(len1+len2,'0');
        
        int num = 0, carry = 0;
        for(int i=len1-1; i>=0; i--) {
            carry = 0;
            for(int j=len2-1; j>=0; j--) {
                // num = (num1[i]-'0')*(num2[j]-'0') + ans[i+j+1]-'0';
                // ans[i+j+1] = (num%10 + '0');
                // ans[i+j] = (ans[i+j] + num/10);
                
                num = (num1[i]-'0')*(num2[j]-'0') + (ans[i+j+1]-'0') + carry;
                ans[i+j+1] = (num%10 + '0');
                carry = num/10;
            }
            
            int k = i;
            while(carry>0) {
                ans[k--] = '0'+(carry%10); 
                carry /= 10; 
            }
            
        }
        
        for(int i=0;i<ans.length();i++){
            if(ans[i] != '0') { 
                return ans.substr(i);
            }
        } 
            
        return "0";
    }
};

Success
Details 
Runtime: 0 ms, faster than 100.00% of C++ online submissions for Multiply Strings.
Memory Usage: 6.4 MB, less than 98.17% of C++ online submissions for Multiply Strings.





class Solution {
public:
    string multiply(string num1, string num2) {
        if(num1=="0" || num2=="0") return "0";
        if(num1=="1") return num2;
        if(num2=="1") return num1;
        
        int len1 = num1.size(), len2 = num2.size();
        
        string result = "";
        
        int start_pos = 0, k, carry = 0, val;
        int digit1, digit2;
        
        for(int j=len2-1; j>=0; j--) {
            k = start_pos;
            carry = 0;
            for(int i=len1-1; i>=0; i--) {
                digit1 = num1[i]-'0';
                digit2 = num2[j]-'0';
                
                val = (digit1*digit2)+carry;
                if(k+1>result.size()) result.push_back('0');
                val += (result[k]-'0');
                
                result[k++] = ('0'+(val%10)) ;
                carry = val/10;
            }
            while(carry>0) {
                if(k+1>result.size()) result.push_back('0');
                val = carry+(result[k]-'0');
                
                result[k++] = ( '0' + (val%10) );
                carry = val/10;
            }
        
            start_pos++;
            // cout<<"result = "<<result<<endl; //
        }
        
        reverse(result.begin(), result.end());
        return result;
    }
};

Success
Details 
Runtime: 11 ms, faster than 95.32% of C++ online submissions for Multiply Strings.
Memory Usage: 6.4 MB, less than 95.63% of C++ online submissions for Multiply Strings.