/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool treeTrversal(TreeNode* root, int targetSum) {
        queue<pair<TreeNode*, int> > q;
        q.push({root, root->val});
        while(!q.empty()) {
            TreeNode* currentNode = q.front().first;
            int currentNodeSum = q.front().second;
            q.pop();
            
            if(currentNode->left==nullptr && currentNode->right==nullptr && currentNodeSum == targetSum ) return true;
            if(currentNode->left!=nullptr) {
                q.push({currentNode->left, currentNodeSum + currentNode->left->val});
            }
            if(currentNode->right!=nullptr) {
                q.push({currentNode->right, currentNodeSum + currentNode->right->val});
            }
        }
        return false;
    }
    bool hasPathSum(TreeNode* root, int targetSum) {
        ios_base::sync_with_stdio(0);
        if(root==nullptr) return false;
        return treeTrversal(root, targetSum);
    }
};


Success
Details 
Runtime: 4 ms, faster than 98.73% of C++ online submissions for Path Sum.
Memory Usage: 21.7 MB, less than 40.27% of C++ online submissions for Path Sum.