/* faster */
class Fenwick {
public:
  explicit Fenwick(int n): vals_(n) {}
  
  // sum(A[1~i])
  int query(int i) const {
    int s = 0;
    while (i > 0) {
      s += vals_[i];
      i -= i & -i;
    }
    return s;
  }
  
  // A[i] += delta
  void update(int i, int delta) {
    while (i < vals_.size()) {
      vals_[i] += delta;
      i += i & -i;
    }
  }
private:
  vector<int> vals_;
};
 
class Solution {
public:
  vector<int> processQueries(vector<int>& queries, int m) {
    Fenwick tree(m * 2  + 1);
    vector<int> pos(m + 1);
    for (int i = 1; i <= m; ++i)     
      tree.update(pos[i] = i + m, 1);
    
    vector<int> ans;
    for (int q : queries) {
      ans.push_back(tree.query(pos[q] - 1));
      tree.update(pos[q], -1); // set to 0.      
      tree.update(pos[q] = m--, 1); // move to the front.
    }
    return ans;
  }
};





/* brute force */
class Solution {
public:
    vector<int> processQueries(vector<int>& nums, int m) {
    vector<int>v, ans;
    for(int i=0;i<m;i++) v.push_back(i+1);
    
    for(int i=0; i<nums.size(); i++){
        int index = find(v.begin(), v.end(), nums[i]) - v.begin();
        ans.push_back(index); 
        
        for(int j=index; j>0; j--) swap(v[j],v[j-1]);
    }
        
    return ans;
}
};