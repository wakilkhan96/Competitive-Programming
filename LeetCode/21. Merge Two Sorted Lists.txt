/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
 
 
 
 /* iterative solution */
 
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode* head = new ListNode();
        ListNode* current = head;

        while(list1!=nullptr && list2!=nullptr) {
            if(list1->val <= list2->val) {
                current->next = list1;
                list1 = list1->next;
            }
            else {
                current->next = list2;
                list2 = list2->next;
            }
            
            current = current->next;
        }
        
        if(list1 == nullptr) current->next = list2;
        else if(list2 == nullptr) current->next = list1;
        else current->next = nullptr;            
        
        // return head;
        return head->next;

    }
    
};


 /* recursive solution */
 
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1==nullptr) return l2;
        if(l2==nullptr) return l1;
		
        if(l1->val < l2->val) {
			l1->next = mergeTwoLists(l1->next, l2);
			return l1;
		} 
        else {
			l2->next = mergeTwoLists(l1, l2->next);
			return l2;
		}
        
    }
};
