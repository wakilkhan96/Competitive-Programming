class Solution {
public:
    bool hasGroupsSizeX(vector<int>& deck) {
        unordered_map<int, int> mp;
        for(int i=0; i<deck.size(); i++) {
            mp[deck[i]]++;
        }
        
        bool possible = true;
        int gcd = mp.begin()->second;
        
        for(auto it=mp.begin(); it!=mp.end(); it++) {
            gcd = __gcd(gcd, it->second);
        }
        
        if(gcd>1) return true;
        return false;
    }
};

Idea:
lets say deck has total of N cards, We can try every possible total number of cards to hold in a pile.
lets guess a pile of total x cards. so total possible piles p = N/x,  then frequency of each cards C_i
must ne divisible by piles p, means C_i % p == 0.



Solution
Approach 1: Brute Force
Intuition

We can try every possible X.

Algorithm

Since we divide the deck of N cards into say, K piles of X cards each, we must have N % X == 0.

Then, say the deck has C_i copies of cards with number i. Each group with number i has X copies, so we must have C_i % X == 0. These are necessary and sufficient conditions.


Complexity Analysis

Time Complexity: O(N^2 \log \log N)O(N 
2
 loglogN), where NN is the number of cards. It is outside the scope of this article to prove that the number of divisors of NN is bounded by O(N \log \log N)O(NloglogN).

Space Complexity: O(N)O(N).


Approach 2: Greatest Common Divisor
Intuition and Algorithm

Again, say there are C_i cards of number i. These must be broken down into piles of X cards each, ie. C_i % X == 0 for all i.

Thus, X must divide the greatest common divisor of C_i. If this greatest common divisor g is greater than 1, then X = g will satisfy. Otherwise, it won't.


Complexity Analysis

Time Complexity: O(N \log^2 N)O(Nlog 
2
 N), where NN is the number of votes. If there are C_iC 
i
​
  cards with number ii, then each gcd operation is naively O(\log^2 C_i)O(log 
2
 C 
i
​
 ). Better bounds exist, but are outside the scope of this article to develop.

Space Complexity: O(N)O(N).