class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int count=0, sum=0;
        
        unordered_map<int,int> mp;
        
        for(int i=0;i<nums.size();i++){
            sum += nums[i];
            if(sum==k) count++;
            if(mp.find((sum-k))!=mp.end()) count+=mp[sum-k];
            
            mp[sum]++;;
           
        }
        return count;
    }
};


Runtime: 71 ms, faster than 88.52% of C++ online submissions for Subarray Sum Equals K.
Memory Usage: 36 MB, less than 87.06% of C++ online submissions for Subarray Sum Equals K.

/*

idea->
Given an array of integers nums and an integer k, return the total number of continuous subarrays whose sum equals to k.
array = [1, 0, 4, 5, 6, 2, 3, 4, 2]
k = 9

index = [0, 1, 2, 3, 4, 5, 6, 7, 8]
array = [1, 0, 4, 5, 6, 2, 3, 4, 2]
            |______|                    -> indices(1 to 3) -> sum(9)
               |___|                    -> indices(2 to 3) -> sum(9)
                        |______|        -> indices(5 to 7) -> sum(9)
                            |______|    -> indices(6 to 8) -> sum(9)

Edge Case
//indices(1 to 3) and  indices(2 to 3) both have -> sum(9) because of an zero at index 1 //

trying to get idea from running sum - >
running sum array = [1, 1, 5, 10, 16, 18, 21, 25, 27]

during traverse calculate running sum and store inside a map, let, for index i and j, i>j,
if(running_sum[i]-running_sum[j-1]==k) we have the answer, but thinking differently,
during running_sum[i], if(running_sum[i]-k) is already present in map, that means we have 
running_sum[j-1] already present in map we have our answer too

* So just, Traverse through the array and keep on adding the elements to sum and check if sum is equal to k (subarray of a single element).
* Now, check if (sum-k) is present in the unordered map if it is present it just means that a subarray exists which has a sum equal to k.
* if (sum-k) doesn't exist just insert the sum to the unordered map. as the sum is the sum of the array up to that index.

 cou += mp[current_sum-k]; because, //cou++ doesn't work with leading zeros {[0,0,0,0,0,0,0,0,0,0,1] = 1}
 // but all the zeros should be taken to cou
 
 
-> Time complexity: O(n).

*/


Approach 1: Brute Force
Algorithm

The simplest method is to consider every possible subarray of the given numsnums array, find the sum of the elements of each of those subarrays and check for the equality of the sum obtained with the given kk. Whenever the sum equals kk, we can increment the countcount used to store the required result.


Complexity Analysis

Time complexity : O(n^3). Considering every possible subarray takes O(n^2)time. For each of the subarray we calculate the sum taking O(n)O(n) time in the worst case, taking a total of O(n^3)time.

Space complexity : O(1). Constant space is used.


Approach 2: Using Cumulative Sum
Algorithm

Instead of determining the sum of elements every time for every new subarray considered, we can make use of a cumulative sum array , sumsum. Then, in order to calculate the sum of elements lying between two indices, we can subtract the cumulative sum corresponding to the two indices to obtain the sum directly, instead of iterating over the subarray to obtain the sum.

In this implementation, we make use of a cumulative sum array, sumsum, such that sum[i]sum[i] is used to store the cumulative sum of numsnums array up to the element corresponding to the (i-1)^{th}(i−1) 
th
  index. Thus, to determine the sum of elements for the subarray nums[i:j]nums[i:j], we can directly use sum[j+1] - sum[i]sum[j+1]−sum[i].


Complexity Analysis

Time complexity : O(n^2). Considering every possible subarray takes O(n^2) time. Finding out the sum of any subarray takes O(1)O(1) time after the initial processing of O(n)O(n) for creating the cumulative sum array.

Space complexity : O(n). Cumulative sum array sumsum of size n+1n+1 is used.


Approach 3: Without Space
Algorithm

Instead of considering all the startstart and endend points and then finding the sum for each subarray corresponding to those points, we can directly find the sum on the go while considering different endend points. i.e. We can choose a particular startstart point and while iterating over the endend points, we can add the element corresponding to the endend point to the sum formed till now. Whenever the sumsum equals the required kk value, we can update the countcount value. We do so while iterating over all the endend indices possible for every startstart index. Whenever, we update the startstart index, we need to reset the sumsum value to 0.


Complexity Analysis

Time complexity : O(n^2). We need to consider every subarray possible.

Space complexity : O(1). Constant space is used.


Approach 4: Using Hashmap
Algorithm

The idea behind this approach is as follows: If the cumulative sum(represented by sum[i]sum[i] for sum up to i^{th}i 
th index) up to two indices is the same, the sum of the elements lying in between those indices is zero. Extending the same thought further, if the cumulative sum up to two indices, say ii and jj is at a difference of kk i.e. if sum[i] - sum[j] = ksum[i]−sum[j]=k, the sum of elements lying between indices ii and jj is kk.

Based on these thoughts, we make use of a hashmap mapmap which is used to store the cumulative sum up to all the indices possible along with the number of times the same sum occurs. We store the data in the form: (sum_i, no. of occurrences of sum_i)(sum 
i ,no.ofoccurrencesofsum i). We traverse over the array numsnums and keep on finding the cumulative sum. Every time we encounter a new sum, we make a new entry in the hashmap corresponding to that sum. If the same sum occurs again, we increment the count corresponding to that sum in the hashmap. Further, for every sum encountered, we also determine the number of times the sum sum-ksum−k has occurred already, since it will determine the number of times a subarray with sum kk has occurred up to the current index. We increment the countcount by the same amount.

After the complete array has been traversed, the countcount gives the required result.

The animation below depicts the process.

Current
1 / 9

Complexity Analysis

Time complexity : O(n). The entire numsnums array is traversed only once.

Space complexity : O(n). Hashmap mapmap can contain up to nn distinct entries in the worst case.

