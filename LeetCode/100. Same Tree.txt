/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool treeTraversal(TreeNode* p, TreeNode* q) {
        if( p==nullptr && q ) return false;
        if( p && q==nullptr ) return false;
        if( p==nullptr && q==nullptr ) return true;
        if(p->val == q->val) {
            return treeTraversal(p->left, q->left) && treeTraversal(p->right, q->right);
        }
        else return false;
        
        // return true;
    }
    bool isSameTree(TreeNode* p, TreeNode* q) {
        return treeTraversal(p, q);
    }
};

Runtime: 0 ms, faster than 100.00% of C++ online submissions for Same Tree.
Memory Usage: 10.1 MB, less than 7.63% of C++ online submissions for Same Tree.