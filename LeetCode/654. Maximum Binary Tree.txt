/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* treeTraversal(int l, int r, vector<int>& nums) {
        if(l>r) return nullptr;
        
        int max_index = l, max_value = INT_MIN;
        for(int i=l; i<=r; i++) {
            if(max_value<nums[i]) {
                max_value = nums[i];
                max_index = i;
            }
        }
        
        TreeNode* node = new TreeNode(max_value);
        node->left = treeTraversal(l, max_index-1, nums);
        node->right = treeTraversal(max_index+1, r, nums);
        return node;
    }
    
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {

        return treeTraversal(0, nums.size()-1, nums);
    }
};




Solution
Approach 1: Recursive Solution
The current solution is very simple. We make use of a function construct(nums, l, r), which returns the maximum binary tree consisting of numbers within the indices ll and rr in the given numsnums array(excluding the r^{th}r 
th
  element).

The algorithm consists of the following steps:

Start with the function call construct(nums, 0, n). Here, nn refers to the number of elements in the given numsnums array.

Find the index, max_imax 
i
​
 , of the largest element in the current range of indices (l:r-1)(l:r−1). Make this largest element, nums[max\_i]nums[max_i] as the local root node.

Determine the left child using construct(nums, l, max_i). Doing this recursively finds the largest element in the subarray left to the current largest element.

Similarly, determine the right child using construct(nums, max_i + 1, r).

Return the root node to the calling function.


Complexity Analysis

Time complexity : O(n^2)O(n 
2
 ). The function construct is called nn times. At each level of the recursive tree, we traverse over all the nn elements to find the maximum element. In the average case, there will be a \log nlogn levels leading to a complexity of O\big(n\log n\big)O(nlogn). In the worst case, the depth of the recursive tree can grow upto nn, which happens in the case of a sorted numsnums array, giving a complexity of O(n^2)O(n 
2
 ).

Space complexity : O(n)O(n). The size of the setset can grow upto nn in the worst case. In the average case, the size will be \log nlogn for nn elements in numsnums, giving an average case complexity of O(\log n)O(logn)