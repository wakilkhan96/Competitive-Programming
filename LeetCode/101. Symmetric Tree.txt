/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool treeTrversal(TreeNode* p, TreeNode* q) {
        if(p==nullptr && q==nullptr) return true;
        if(p!=nullptr && q!=nullptr) {
            if(p->val == q->val) {
                return treeTrversal(p->left, q->right) && treeTrversal(p->right, q->left);
            }
            else return false;
        } 
        else return false;
        
        // return true;
    }
    bool isSymmetric(TreeNode* root) {
        if(root==nullptr) return true;
        return treeTrversal(root->left, root->right);
    }
};

Success
Details 
Runtime: 0 ms, faster than 100.00% of C++ online submissions for Symmetric Tree.
Memory Usage: 16.5 MB, less than 18.11% of C++ online submissions for Symmetric Tree.






/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool treeTrversal(TreeNode* p, TreeNode* q) {
        if(p==nullptr && q) return false;
        if(p && q==nullptr) return false;
        if(p==nullptr && q==nullptr) return true;
        
        if(p->val == q->val) {
            return treeTrversal(p->left, q->right) && treeTrversal(p->right, q->left);
        }
        else return false;
        
        // return true;
    }
    bool isSymmetric(TreeNode* root) {
        if(root==nullptr) return true;
        return treeTrversal(root->left, root->right);
    }
};

Success
Details 
Runtime: 4 ms, faster than 82.46% of C++ online submissions for Symmetric Tree.
Memory Usage: 16.3 MB, less than 92.33% of C++ online submissions for Symmetric Tree.