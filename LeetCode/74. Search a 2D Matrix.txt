class Solution {
public:
    bool search(vector<int>& v, int target) {
        int l=0, r=v.size()-1, mid=0;
        while(l<=r) {
            // cout<<l<<" - "<<mid<<" - "<<r<<endl;
            mid = (l+r)/2;
            if(v[l]==target || v[mid]==target || v[r]==target ) return true;
            if(v[mid]<target) l = mid+1;
            else r = mid-1;
        }
        return false;
    }
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        // Method 1
        // linear search
        // for(int i=0; i<matrix.size(); i++) {
        //     int size = matrix[i].size();
        //     if(target<=matrix[i][size-1]) {
        //         if(search(matrix[i], target)) return true;
        //         cout<<"row - "<<i<< " not found"<<endl;
        //     }
        
        // }
        // return false;
        
        
        
        // Method 2
        // binary search
        // finding lower bound for target 
        int l=-1, r=matrix.size(), mid = 0;
        while(l+1<r) {
            mid = (l+r)/2;
            if(matrix[mid][matrix[0].size()-1]<target) l = mid;
            else r = mid;
        }
        
        // so r is lower bound index
        // cout<<r<<endl;
        if(r>=matrix.size()) r--;
        
        if(search(matrix[r], target)) return true;
        return false;

    }
};





https://leetcode.com/problems/search-a-2d-matrix/discuss/1895847/C%2B%2B-oror-Algorithm-oror-Binary-Search-oror-Brute-Force

KNOCKCAT

APPROACH 2 BINARY SEARCH

The problem statement states that the values of the last col of the ith row is greater than the first col of (i+1)th row. Also, each row is sorted.
This means that, if we linearly arrange the elements of each row, we will have a sorted array. So we can now perform a binary search over it.
How will the matrix behave like an array without actually creating an auxiliary array?
It could be achieved by the following formula :
A n * m matrix converted into an array: matrix[x][y] : a[x * m + y]
An array can be converted into n * m matrix: a[x] : matrix[x / m][x % m]
Solution Steps

Operate the matrix as an array using the above formula
Perform a binary search for the target element over the matrix
Complexity Analysis

Time Complexity: O(log(m*n)) =O(log(m) + log(n))

Space Complexity: O(1)

CODE WITH EXPLANATION

			// ðŸ˜‰ðŸ˜‰ðŸ˜‰ðŸ˜‰Please upvote if it helps ðŸ˜‰ðŸ˜‰ðŸ˜‰ðŸ˜‰
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n = matrix.size();
        int m = matrix[0].size();
        
		// if matrix have 0 rows or 0 colums
        if(n == 0 || m == 0)
            return false;
        
		// treating matrix as array just taking care of endices
		// [0..n*m]
        int start = 0, end = m*n - 1;
        
        while(start <= end)
        {
            int mid = start + (end - start) / 2;
			// a[x] : matrix[x / m][x % m] formulae
            int ind = matrix[mid/m][mid%m];
            if (target == ind)
                return true;
			// left half
            else if(target < ind)
                end = mid - 1;
            else
			// right half
                start = mid + 1;       
        }
        return false;
    }
	// for github repository link go to my profile.
};