class Solution {
public:
    int sum_1_to_n(int n) {
        return (n*(n+1))/2;
    }
    int total_possible_slices_of_length_3_to_n(int n) {
        int slices = sum_1_to_n(n-2);
        return slices;
    }
	
    int numberOfArithmeticSlices(vector<int>& nums) {
        if(nums.size()<3) return 0;
        
        vector<int> subArrayLengths;
        
        vector<int> difference(nums.size(), 0);
        
        int i=0, j=0;
        for( i=0, j=0; j<nums.size(); j++ ) {
            if(j==i) continue;
            difference[j] = nums[j]-nums[j-1];
            if(j-i<2) continue;
            if(difference[j]!=difference[j-1]) {
                if( j-1 - i >= 2 ) subArrayLengths.push_back( (j-1 - i) + 1);
                i = j-1;
            }
        }
        if( j-1 - i >= 2 )  subArrayLengths.push_back( (j-1 - i) + 1);
        
        // for(i=0; i<difference.size(); i++) cout<<difference[i]<<" ";
        // cout<<endl;
        // for(i=0; i<subArrayLengths.size(); i++) cout<<subArrayLengths[i]<<" ";
        // cout<<endl;
        
        
        int total = 0;
        for(i=0; i<subArrayLengths.size(); i++) total += total_possible_slices_of_length_3_to_n(subArrayLengths[i]);
        return total;
    }
};


/* Technique */
Idea is to find the lengths of subarrays of consecutive integers where difference between any two consecutive elements is the same. 
Like, for Input: [1,2,3,4,6,-3,-6,-9,12,0,1,2,3,4,6]
				  -------   --------    ---------
	[ 1,2,3,4, ]	= legth(4)
	[ -3,-6,-9 ]	= legth(4)
	[ 0,1,2,3,4 ]	= legth(5)
	
So, when we got our lengths, then just calculate that how many slices can be made from every one of those lengths,
as our lengths must be greater or equal to 3.

So, for a subarray of different lengths, lets calculate how many slices can be made of it,

	Subarray 		length			Slices
		
	1,2,3			3 				1,2,3					-> 1 of legth 3
															total = ( 1 )
	----------------------------------------------------
	1,2,3,4			3 				1,2,3					-> 2 of legth 3, 1 of legth 4
					3 				2,3,4					
					4				1,2,3,4					total = ( 1 + 2 )
															
	----------------------------------------------------
	1,2,3,4,5		3 				1,2,3					-> 3 of legth 3, 2 of legth 4, 1 of legth 5
					3 				2,3,4					
					3				3,4,5					total = ( 1 + 2 + 3 )
					4				1,2,3,4					  
					4				2,3,4,5
					5				1,2,3,4,5
															
	----------------------------------------------------
	1,2,3,4,5,6		3 				1,2,3					-> 4 of legth 3, 3 of legth 4, 2 of legth 5, 1 of legth 6
					3 				2,3,4
					3				3,4,5					total = ( 1 + 2 + 3 + 4)
					3				4,5,6
					4				1,2,3,4
					4				2,3,4,5
					4				3,4,5,6
					5				1,2,3,4,5
					5				2,3,4,5,6
					6				1,2,3,4,5,6
					
	----------------------------------------------------
	
	So,      total_possible_slices_of_length_3_to_n(int n), slices = sum_1_to_n(subarray_length-2);
	
	
	Sum of possible slices for all subarray lengths is the answer;
	
	
	
	
Another solutions,

class Solution {
public:
 
    int numberOfArithmeticSlices(vector<int>& nums) {
        int j=1,ans=0;
        for(int i=2;i<nums.size();i++)
        {
            if(nums[i]-nums[i-1]!=nums[i-1]-nums[i-2])
                j=i;
            ans=ans+i-j;
            
        }
        return ans;
    }
};



class Solution {
public:
    int numberOfArithmeticSlices(vector<int>& nums) {
        if(nums.size() <= 2)return 0;
        int count = 0, ans = 0;
        for(int i = 0; i < nums.size() - 2; i++){
            if(nums[i+1] - nums[i] == nums[i+2] - nums[i+1]){
                count++;
            }
            else{
                ans += ((count * (count+1)) / 2);
                count = 0;
            }
            
        }
        if(count) ans += ((count * (count+1)) / 2);
        return ans;
    }
};