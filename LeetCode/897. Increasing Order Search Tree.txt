/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* increasingBST(TreeNode* root) {
        vector<int> ans;
        
        // inorder traversal of binary search tree traverses all the element in sorted order
        treeInorderTraversal(root, ans);
        
        TreeNode* newHead = new TreeNode(-1);
        TreeNode* current = newHead;
        for(int i=0; i<ans.size(); i++) {
            current->right = new TreeNode(ans[i]);
            current = current->right;
        }
        
        return newHead->right;
    }
    
    void treeInorderTraversal(TreeNode* root, vector<int>& ans) {
        if(root==nullptr) return;
        treeInorderTraversal(root->left, ans);
        ans.push_back(root->val);
        treeInorderTraversal(root->right, ans);
    }
};



/*
Here we first do inorder traversal and store value in vector
The Value stored in vector will be sorted
So We create the BST using these value and first value of vector become root
Sot the tree Will be formed according to the question
*/








Others:


class Solution {
public:
    TreeNode* head = new TreeNode();
    TreeNode* it=head;
    
    void inorder(TreeNode* root)
    {
        if(root==NULL)
            return;
        
        // go to the extreme left
        inorder(root->left);
        
        // store that extreme left into the right of the new tree
        it->right = new TreeNode(root->val);
        
        // update the itr by itr->right
        it=it->right;
        
        // check the right if there is
        inorder(root->right);
    }

    TreeNode* increasingBST(TreeNode* root) 
    {
        inorder(root);
        return head->right;
    }
    
};